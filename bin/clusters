#!/usr/bin/env bash
#
# A very small utility that helps switching Kubernetes clusters.
# Heavily inspired by kubectx

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SELF_CMD="$0"

usage() {
  cat <<"EOF"
USAGE:
  clusters                       : list the clusters
  clusters <NAME>                : switch to cluster <NAME>
  clusters -h,--help             : show this message
EOF
}

exit_err() {
   echo >&2 "${1}"
   exit 1
}

_gke_get_current_project() {
  $GCLOUD config get-value core/project 2> /dev/null
}

_gke_get_current_region() {
  $GCLOUD config get-value compute/region 2> /dev/null
}

_gke_get_current_zone() {
  $GCLOUD config get-value compute/zone 2> /dev/null
}

_gke_get_clusters() {
  $GCLOUD container clusters list --format="value(name)"
}

get_clusters() {
  if [ "${BACKEND}" == "GKE" ]; then
    _gke_get_clusters
  elif [ "${BACKEND}" == "AWS" ]; then
    exit_err "AWS backend is not implemented yet"
  fi
}

list_clusters() {
  set -u pipefail
  local ctx_list
  ctx_list=$(get_clusters) || exit_err "error getting cluster list"


  for c in $ctx_list; do
  if [[ -n "${_CLUSTERS_FORCE_COLOR:-}" || \
       -t 1 && -z "${NO_COLOR:-}" ]]; then
      echo "${c}"
  else
    echo "${c}"
  fi
  done
}

_gke_switch_cluster() {
  local zone project
  project=$(_gke_get_current_project) || exit_err "error getting current project"
  zone=$(_gke_get_current_zone) || exit_err "error getting current zone"
  $GCLOUD container clusters get-credentials "${1}" --zone "${zone}" --project "${project}"
}

switch_cluster() {
  _gke_switch_cluster "${1}"
}

choose_cluster_interactive() {
  local choice
  choice="$(_CLUSTERS_FORCE_COLOR=1 \
    FZF_DEFAULT_COMMAND="${SELF_CMD}" \
    fzf --ansi || true)"
  if [[ -z "${choice}" ]]; then
    echo 2>&1 "error: you did not choose any of the options"
    exit 1
  else
    set_cluster "${choice}"
  fi
}

set_cluster() {
  switch_cluster "${1}"
}

main() {
  OPTIND=1         # Reset in case getopts has been used previously in the shell. 
  DEBUG=0
  BACKEND=GKE

  while getopts "hdag" opt; do
      case "$opt" in
          h)
              usage
              exit 0
              ;;
          d)
              DEBUG=1
              shift
              ;;
          a)
              BACKEND=AWS
              shift
              ;;
          g)
              BACKEND=GKE
              shift
              ;;
          *)
              echo "Programming error"
              exit 3
              ;;
      esac
  done
  shift $((OPTIND-1))

  if [ "${BACKEND}" == "GKE" ]; then
    if hash gcloud 2>/dev/null; then
      GCLOUD=gcloud
    else
      echo >&2 "kubectl is not installed"
      exit 1
    fi
  fi

  if [[ -t 1 &&  -z "${CLUSTERS_IGNORE_FZF:-}" && "$(type fzf &>/dev/null; echo $?)" -eq 0 ]]; then
    choose_cluster_interactive
  else
    list_clusters
  fi
}

main "$@"

